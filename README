Readme
This is the first sample Repo in git that I am creating now.....
These are the following commands I had learnt now
1. git init
2. git status
3. git add
4. git diff
4.1 git diff --staged
4.2 git diff --cached
5. git commit
5.1 git commit - v also puts the diff of your change in the editor so you can see exactly what you did. 
5.2 git commit - m Alternativatively by using -m flag in the git commit command you can specify the commit message inline.
5.3 git commit -a option makes the git automatically stage every files that is already tracked before doing the commit. Letting you to skip the git add part.
6 git log -- displays the commit history
6.1 git log -p option shows the diff introduced in each commit.
6.2 git log -(n) option shows the last n commits. Where 'n' is any integer.
6.3 git log --stat option displays the abbereviated stats for each commit.
6.4 git log --pretty=oneline option displays each commit in a single line.
6.5 git log --pretty=format:"%h - %an,%ar : %s". 
	$ git log --pretty=format:"%h - %an, %ar : %s"
	ca82a6d - Scott Chacon, 11 months ago : changed the verison number
	085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
	a11bef0 - Scott Chacon, 11 months ago : first commit
7 Undoing things
7.1 git commit --amend
8. git config --global user.emai "your email here"
8.1 git config --global user.name "your name here"
the above two commands sets the users email address and name.
8.3 git config --global user.email 
8.4 git config --global user.name
the above two commands lists the user name and his email address.




Before commiting make sure to remove some unwanted space things.

 <osse> --cached and --staged mean the same thing
[11:41] <grawity> 'cache' is the old name for the staging area, AFAIK
[11:41] <osse> and 'index' is the current :p
If the git status command is too vague for you- you want to know exactly what you changed, not just which files were changed.- you can use git diff command.

I am not seeing the changes but not updated
git add is a multi purpose command which may be used for the following
1. to start tracking
2. to stage files
3. to deal with merge conflict.
